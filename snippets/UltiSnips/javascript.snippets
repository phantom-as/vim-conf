snippet ts "Test Suite for React Component" b
import { cleanup, render, initState } from 'helpers/tests';
import React from 'react';
import ${1:`!v substitute(expand('%:t:r'), ".test", "", "g")`} from './${1:`!v substitute(expand('%:t:r'), ".test", "", "g")`}';

afterEach(cleanup);

const options = {
	withIntl: true,
	withRouting: true,
  withRedux: initState,
};

describe('<${1:`!v substitute(expand('%:t:r'), ".test", "", "g")`} />', () => {
  it('should render component', () => {
    render(<${1:`!v substitute(expand('%:t:r'), ".test", "", "g")`} />, options);
	});
});
endsnippet

snippet rc "React Component" b
import React from 'react';
import PropTypes from 'prop-types';

const ${1:`!v expand('%:t:r')`} = ({}) => {
  return (
    <div>
    </div>
  );
};

${1:`!v expand('%:t:r')`}.propTypes = {
};

${1:`!v expand('%:t:r')`}.defaultProps = {
};

export default ${1:`!v expand('%:t:r')`};
endsnippet

snippet rcs "React Component with Styles" b
import React from 'react';
import PropTypes from 'prop-types';
import createStyles from '@material-ui/core/styles/createStyles';
import makeStyles from '@material-ui/core/styles/makeStyles';

const useStyles = makeStyles(theme =>
  createStyles({
    root: {
    },
  })
);

const ${1:`!v expand('%:t:r')`} = ({}) => {
  const classes = useStyles();
  return (
    <div className={classes.root}>
    </div>
  );
};

${1:`!v expand('%:t:r')`}.propTypes = {
};

${1:`!v expand('%:t:r')`}.defaultProps = {
};

export default ${1:`!v expand('%:t:r')`};
endsnippet

snippet useStyles "Define useStyles hook" b
import createStyles from '@material-ui/core/styles/createStyles';
import makeStyles from '@material-ui/core/styles/makeStyles';

const useStyles = makeStyles(theme =>
  createStyles({
    root: {
    },
  })
);
endsnippet

snippet defineMessages "define messages" b
import { defineMessages, FormattedMessage } from 'react-intl';

const i18n = defineMessages({
  /** Example
  messageId: {
    id: '${1:`!v expand('%:t:r').messageId',
    defaultMessage: 'Hello world!',
  },
  */
});
endsnippet
